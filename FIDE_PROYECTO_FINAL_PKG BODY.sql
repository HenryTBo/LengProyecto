CREATE OR REPLACE PACKAGE BODY FIDE_PROYECTO_FINAL_PKG AS
--Calcular el total de pedidos de un usuario
FUNCTION fide_total_pedidos_usuario_fn(
    p_usuario_id IN NUMBER
) RETURN NUMBER IS
    v_total NUMBER := 0;
    CURSOR c_pedidos IS
        SELECT SUM(TOTAL)
        FROM FIDE_PEDIDOS_TB
        WHERE USUARIOS_ID_USUARIO_FK = p_usuario_id;
BEGIN
    OPEN c_pedidos;
    FETCH c_pedidos INTO v_total;
    CLOSE c_pedidos;
    RETURN NVL(v_total, 0);
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON DATOS');
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR:'||SQLERRM);
END fide_total_pedidos_usuario_fn;

--Verificar Stock disponible
FUNCTION fide_verificar_stock_producto_fn(
    p_producto_id IN NUMBER
) RETURN NUMBER IS
    v_stock NUMBER := 0;
    CURSOR c_stock IS
        SELECT SUM(CANTIDAD_STOCK)
        FROM FIDE_INVENTARIO_TB
        WHERE PRODUCTOS_ID_PRODUCTO_FK = p_producto_id;
BEGIN
    OPEN c_stock;
    FETCH c_stock INTO v_stock;
    CLOSE c_stock;
    RETURN NVL(v_stock, 0);
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON DATOS');
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR:'||SQLERRM);
END fide_verificar_stock_producto_fn;

--Obtener direccion completa de un Usuario
FUNCTION fide_obtener_direccion_fn(
    p_usuario_id IN NUMBER
) RETURN VARCHAR2 IS
    v_direccion VARCHAR2(1000);
    CURSOR c_dir IS
        SELECT 
            p.NOMBRE_PAIS || ', ' || 
            pr.NOMBRE_PROVINCIA || ', ' || 
            c.NOMBRE_CANTON || ', ' || 
            d.NOMBRE_DISTRITO || ', ' || 
            dir.OTRAS_SENAS
        FROM FIDE_DIRECCIONES_TB dir
        JOIN FIDE_PAISES_TB p ON dir.PAISES_ID_PAIS_FK = p.PAISES_ID_PAIS_PK
        JOIN FIDE_PROVINCIAS_TB pr ON dir.PROVINCIAS_ID_PROVINCIA_FK = pr.PROVINCIAS_ID_PROVINCIA_PK
        JOIN FIDE_CANTONES_TB c ON dir.CANTONES_ID_CANTON_FK = c.CANTONES_ID_CANTON_PK
        JOIN FIDE_DISTRITOS_TB d ON dir.DISTRITOS_ID_DISTRITO_FK = d.DISTRITOS_ID_DISTRITO_PK
        WHERE dir.USUARIOS_ID_USUARIO_FK = p_usuario_id;
BEGIN
    OPEN c_dir;
    FETCH c_dir INTO v_direccion;
    CLOSE c_dir;
    RETURN v_direccion;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON DATOS');
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR:'||SQLERRM);
END fide_obtener_direccion_fn;

--Contar productos por categoria
FUNCTION fide_productos_categoria_fn(
    p_categoria_id IN NUMBER
) RETURN NUMBER IS
    v_cantidad NUMBER := 0;
    
    CURSOR c_productos IS
        SELECT COUNT(*)
        FROM FIDE_PRODUCTOS_TB
        WHERE CATEGORIA_ID_CATEGORIA_FK = p_categoria_id;
BEGIN
    OPEN c_productos;
    FETCH c_productos INTO v_cantidad;
    CLOSE c_productos;
    
    RETURN NVL(v_cantidad, 0);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON DATOS');
        RETURN 0;
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR:'||SQLERRM);
        RETURN NULL;
END fide_productos_categoria_fn;

--Obtener el nombre completo de un Usuario y email
FUNCTION fide_obtener_nombre_usuario_fn(
    p_usuario_id IN NUMBER
) RETURN VARCHAR2 IS
    v_nombre_completo VARCHAR2(200);
    
    CURSOR c_usuario IS
        SELECT NOMBRE, EMAIL
        FROM FIDE_USUARIOS_TB
        WHERE USUARIO_ID_USUARIO_PK = p_usuario_id;
BEGIN
    FOR usuario_rec IN c_usuario LOOP
        v_nombre_completo := usuario_rec.NOMBRE || ' (' || usuario_rec.EMAIL || ')';
    END LOOP;
    
    RETURN v_nombre_completo;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON DATOS');
        RETURN 'Usuario no encontrado';
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR:'||SQLERRM);
        RETURN NULL;
END fide_obtener_nombre_usuario_fn;

--Calcular el valor de un carrito

FUNCTION fide_calcular_valor_carrito_fn(
    p_usuario_id IN NUMBER
) RETURN NUMBER IS
    v_total NUMBER := 0;
    CURSOR c_carrito IS
        SELECT SUM(p.PRECIO_UNITARIO * c.CANTIDAD)
        FROM FIDE_CARRITO_TB c
        JOIN FIDE_PRODUCTOS_TB p ON c.PRODUCTOS_ID_PRODUCTO_FK = p.PRODUCTO_ID_PRODUCTO_PK
        WHERE c.USUARIOS_ID_USUARIO_FK = p_usuario_id;
BEGIN
    OPEN c_carrito;
    FETCH c_carrito INTO v_total;
    CLOSE c_carrito;
    RETURN NVL(v_total, 0);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON DATOS');
        RETURN 'Usuario no encontrado';
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR:'||SQLERRM);
        RETURN NULL;
END fide_calcular_valor_carrito_fn;

--Obtener toda la descripcion completa de un producto

FUNCTION fide_obtener_descripcion_producto_fn(
    p_producto_id IN NUMBER
) RETURN VARCHAR2 IS
    v_descripcion_completa VARCHAR2(500);
    
    CURSOR c_producto IS
        SELECT p.NOMBRE || ' - ' || p.DESCRIPCION || ' (Presentación: ' || pr.TIPO_PRESENTACION || ')' AS descripcion
        FROM FIDE_PRODUCTOS_TB p
        JOIN FIDE_PRESENTACIONES_TB pr ON p.PRESENTACIONES_ID_PRESENTACION_FK = pr.PRESENTACIONES_ID_PRESENTACION_PK
        WHERE p.PRODUCTO_ID_PRODUCTO_PK = p_producto_id;
BEGIN
    OPEN c_producto;
    FETCH c_producto INTO v_descripcion_completa;
    CLOSE c_producto;
    
    RETURN v_descripcion_completa;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Producto no encontrado');
        RETURN 'Descripción no disponible';
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al obtener descripción: '||SQLERRM);
        RETURN NULL;
        
END fide_obtener_descripcion_producto_fn;

--Obtener el valor total de un pedido
FUNCTION fide_calcular_total_pedido_fn(
    p_pedido_id IN NUMBER
) RETURN NUMBER IS
    v_total_pedido NUMBER := 0;
    
    CURSOR c_detalle_pedido IS
        SELECT SUM(dp.CANTIDAD * dp.PRECIO_UNITARIO)
        FROM FIDE_DETALLE_PEDIDO_TB dp
        WHERE dp.PEDIDOS_ID_PEDIDO_FK = p_pedido_id
        AND dp.ESTADOS_ID_ESTADO_FK = 1; 
BEGIN
    OPEN c_detalle_pedido;
    FETCH c_detalle_pedido INTO v_total_pedido;
    CLOSE c_detalle_pedido;
    
    RETURN NVL(v_total_pedido, 0);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontraron detalles para el pedido');
        RETURN 0;
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al calcular total del pedido: '||SQLERRM);
        RETURN NULL;
END fide_calcular_total_pedido_fn;
-- FIDE_ESTADOS_TB
-- Inserción
 PROCEDURE FIDE_ESTADOS_INSERTAR_SP (
    P_ESTADOS_ID_ESTADO IN NUMBER,
    P_NOMBRE_ESTADO IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2
)IS
BEGIN
    INSERT INTO FIDE_ESTADOS_TB (ESTADOS_ID_ESTADO_PK,NOMBRE_ESTADO,DESCRIPCION)
    VALUES (P_ESTADOS_ID_ESTADO, P_NOMBRE_ESTADO,P_DESCRIPCION);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END FIDE_ESTADOS_INSERTAR_SP;    

-- Modificación
 PROCEDURE FIDE_ESTADOS_MODIFICAR_SP (
    P_ESTADOS_ID_ESTADO IN NUMBER,
    P_NOMBRE_ESTADO IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2
)IS
BEGIN
    UPDATE FIDE_ESTADOS_TB
    SET NOMBRE_ESTADO = P_NOMBRE_ESTADO,
            DESCRIPCION = P_DESCRIPCION
    WHERE ESTADOS_ID_ESTADO_PK = P_ESTADOS_ID_ESTADO;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END FIDE_ESTADOS_MODIFICAR_SP;    

-- FIDE_PAISES_TB 
-- Inserción
 PROCEDURE FIDE_PAISES_INSERTAR_SP (
    P_PAISES_ID_PAIS_PK  IN NUMBER ,
    P_NOMBRE_PAIS IN VARCHAR2
)IS
BEGIN
    INSERT INTO FIDE_PAISES_TB (PAISES_ID_PAIS_PK, NOMBRE_PAIS)
    VALUES (P_PAISES_ID_PAIS_PK, P_NOMBRE_PAIS);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END FIDE_PAISES_INSERTAR_SP;

-- Modificación
 PROCEDURE FIDE_PAISES_MODIFICAR_SP (
    P_PAISES_ID_PAIS_PK  IN NUMBER ,
    P_NOMBRE_PAIS IN VARCHAR2
)IS
BEGIN
    UPDATE FIDE_PAISES_TB
    SET NOMBRE_PAIS = P_NOMBRE_PAIS
    WHERE PAISES_ID_PAIS_PK = P_PAISES_ID_PAIS_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END FIDE_PAISES_MODIFICAR_SP;

-- FIDE_PROVINCIAS_TB 
-- Inserción
 PROCEDURE FIDE_PROVINCIAS_INSERTAR_SP (
    P_PROVINCIAS_ID_PROVINCIA_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_NOMBRE_PROVINCIA IN VARCHAR2
) IS
BEGIN
    INSERT INTO FIDE_PROVINCIAS_TB (PROVINCIAS_ID_PROVINCIA_PK, ESTADOS_ID_ESTADO_FK,NOMBRE_PROVINCIA) 
    VALUES (P_PROVINCIAS_ID_PROVINCIA_PK,P_ESTADOS_ID_ESTADO_FK,P_NOMBRE_PROVINCIA);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_PROVINCIAS_INSERTAR_SP;

-- Modificación
 PROCEDURE FIDE_PROVINCIAS_MODIFICAR_SP (
    P_PROVINCIAS_ID_PROVINCIA_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_NOMBRE_PROVINCIA IN VARCHAR2
) IS
BEGIN
    UPDATE FIDE_PROVINCIAS_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK,
            NOMBRE_PROVINCIA = P_NOMBRE_PROVINCIA
    WHERE PROVINCIAS_ID_PROVINCIA_PK = P_PROVINCIAS_ID_PROVINCIA_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_PROVINCIAS_MODIFICAR_SP;

-- Eliminación lógica
 PROCEDURE FIDE_PROVINCIAS_ELIMINAR_SP (
    P_PROVINCIAS_ID_PROVINCIA_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_PROVINCIAS_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE PROVINCIAS_ID_PROVINCIA_PK = P_PROVINCIAS_ID_PROVINCIA_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_PROVINCIAS_ELIMINAR_SP;

-- FIDE_CANTONES_TB 
-- Inserción
 PROCEDURE FIDE_CANTONES_INSERTAR_SP (
    P_CANTONES_ID_CANTON_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_NOMBRE_CANTON IN VARCHAR2
) IS
BEGIN
    INSERT INTO FIDE_CANTONES_TB (CANTONES_ID_CANTON_PK, ESTADOS_ID_ESTADO_FK,NOMBRE_CANTON) 
    VALUES (P_CANTONES_ID_CANTON_PK,P_ESTADOS_ID_ESTADO_FK,P_NOMBRE_CANTON);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_CANTONES_INSERTAR_SP;

-- Modificación
 PROCEDURE FIDE_CANTONES_MODIFICAR_SP (
    P_CANTONES_ID_CANTON_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_NOMBRE_CANTON IN VARCHAR2
) IS
BEGIN
    UPDATE FIDE_CANTONES_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK,
            NOMBRE_CANTON = P_NOMBRE_CANTON
    WHERE CANTONES_ID_CANTON_PK = P_CANTONES_ID_CANTON_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_CANTONES_MODIFICAR_SP;

-- Eliminación lógica
 PROCEDURE FIDE_CANTONES_ELIMINAR_SP (
     P_CANTONES_ID_CANTON_PK IN NUMBER,
     P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_CANTONES_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE CANTONES_ID_CANTON_PK = P_CANTONES_ID_CANTON_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_CANTONES_ELIMINAR_SP;
-- FIDE_DISTRITOS_TB 
-- Inserción
 PROCEDURE FIDE_DISTRITOS_INSERTAR_SP (
    P_DISTRITOS_ID_DISTRITO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_NOMBRE_DISTRITO IN VARCHAR2
) IS
BEGIN
    INSERT INTO FIDE_DISTRITOS_TB (DISTRITOS_ID_DISTRITO_PK,ESTADOS_ID_ESTADO_FK,NOMBRE_DISTRITO) 
    VALUES (P_DISTRITOS_ID_DISTRITO_PK,P_ESTADOS_ID_ESTADO_FK,P_NOMBRE_DISTRITO);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_DISTRITOS_INSERTAR_SP;

-- Modificación
 PROCEDURE FIDE_DISTRITOS_MODIFICAR_SP (
    P_DISTRITOS_ID_DISTRITO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_NOMBRE_DISTRITO IN VARCHAR2
) IS
BEGIN
    UPDATE FIDE_DISTRITOS_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK,
            NOMBRE_DISTRITO = P_NOMBRE_DISTRITO
    WHERE DISTRITOS_ID_DISTRITO_PK = P_DISTRITOS_ID_DISTRITO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_DISTRITOS_MODIFICAR_SP;

-- Eliminación lógica
 PROCEDURE FIDE_DISTRITOS_ELIMINAR_SP  (
    P_DISTRITOS_ID_DISTRITO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_DISTRITOS_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE DISTRITOS_ID_DISTRITO_PK = P_DISTRITOS_ID_DISTRITO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_DISTRITOS_ELIMINAR_SP;

-- FIDE_CARGOS_TB
-- Inserción
 PROCEDURE FIDE_CARGOS_INSERTAR_SP (
    P_CARGOS_ID_CARGO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_NOMBRE_CARGO IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2
) IS
BEGIN
    INSERT INTO FIDE_CARGOS_TB (CARGOS_ID_CARGO_PK,ESTADOS_ID_ESTADO_FK,NOMBRE_CARGO,DESCRIPCION) 
        VALUES (P_CARGOS_ID_CARGO_PK,P_ESTADOS_ID_ESTADO_FK,P_NOMBRE_CARGO,P_DESCRIPCION);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_CARGOS_INSERTAR_SP;

-- Modificación
 PROCEDURE FIDE_CARGOS_MODIFICAR_SP (
    P_CARGOS_ID_CARGO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_NOMBRE_CARGO IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2
) IS
BEGIN
    UPDATE FIDE_CARGOS_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK,
            NOMBRE_CARGO = P_NOMBRE_CARGO,
            DESCRIPCION = P_DESCRIPCION
    WHERE CARGOS_ID_CARGO_PK = P_CARGOS_ID_CARGO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_CARGOS_MODIFICAR_SP;

-- Eliminación lógica
 PROCEDURE FIDE_CARGOS_ELIMINAR_SP (
    P_CARGOS_ID_CARGO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_CARGOS_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE CARGOS_ID_CARGO_PK = P_CARGOS_ID_CARGO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_CARGOS_ELIMINAR_SP;

-- FIDE_TIPO_USUARIO_TB
-- Inserción
 PROCEDURE FIDE_TIPO_USUARIO_INSERTAR_SP (
    P_TIPO_USUARIO_ID_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_CARGOS_ID_CARGO_FK IN NUMBER,
    P_NOMBRE_TIPO_USUARIO IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2
) IS
BEGIN
    INSERT INTO FIDE_TIPO_USUARIO_TB (TIPO_USUARIO_ID_PK,ESTADOS_ID_ESTADO_FK,CARGOS_ID_CARGO_FK,NOMBRE_TIPO_USUARIO,DESCRIPCION) 
    VALUES (P_TIPO_USUARIO_ID_PK,P_ESTADOS_ID_ESTADO_FK,P_CARGOS_ID_CARGO_FK,P_NOMBRE_TIPO_USUARIO,P_DESCRIPCION);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_TIPO_USUARIO_INSERTAR_SP;

-- Modificación
 PROCEDURE FIDE_TIPO_USUARIO_MODIFICAR_SP (
    P_TIPO_USUARIO_ID_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_CARGOS_ID_CARGO_FK IN NUMBER,
    P_NOMBRE_TIPO_USUARIO IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2
) IS
BEGIN
    UPDATE FIDE_TIPO_USUARIO_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK,
            CARGOS_ID_CARGO_FK = P_CARGOS_ID_CARGO_FK,
            NOMBRE_TIPO_USUARIO = P_NOMBRE_TIPO_USUARIO,
            DESCRIPCION = P_DESCRIPCION
    WHERE TIPO_USUARIO_ID_PK = P_TIPO_USUARIO_ID_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_TIPO_USUARIO_MODIFICAR_SP;

-- Eliminación lógica
 PROCEDURE FIDE_TIPO_USUARIO_ELIMINAR_SP (
    P_TIPO_USUARIO_ID_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_TIPO_USUARIO_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE TIPO_USUARIO_ID_PK = P_TIPO_USUARIO_ID_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_TIPO_USUARIO_ELIMINAR_SP;

-- FIDE_USUARIOS_TB
-- Inserción
 PROCEDURE FIDE_USUARIOS_INSERTAR_SP (
    P_USUARIO_ID_USUARIO_PK IN NUMBER,
    P_TIPO_USUARIO_ID_FK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_EMAIL IN VARCHAR2,
    P_TELEFONO IN VARCHAR2,
    P_CONTRASENA IN VARCHAR2
) IS
BEGIN
    INSERT INTO FIDE_USUARIOS_TB (USUARIO_ID_USUARIO_PK,TIPO_USUARIO_ID_FK,ESTADOS_ID_ESTADO_FK,NOMBRE,EMAIL,TELEFONO,CONTRASENA) 
    VALUES (P_USUARIO_ID_USUARIO_PK,P_TIPO_USUARIO_ID_FK,P_ESTADOS_ID_ESTADO_FK,P_NOMBRE,P_EMAIL,P_TELEFONO,P_CONTRASENA);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_USUARIOS_INSERTAR_SP;


-- Modificación
 PROCEDURE FIDE_USUARIOS_MODIFICAR_SP (
    P_USUARIO_ID_USUARIO_PK IN NUMBER,
    P_TIPO_USUARIO_ID_FK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_EMAIL IN VARCHAR2,
    P_TELEFONO IN VARCHAR2,
    P_CONTRASENA IN VARCHAR2
) IS
BEGIN
    UPDATE FIDE_USUARIOS_TB
    SET TIPO_USUARIO_ID_FK = P_TIPO_USUARIO_ID_FK,
            ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK,
            NOMBRE = P_NOMBRE,
            EMAIL = P_EMAIL,
            TELEFONO = P_TELEFONO,
            CONTRASENA = P_CONTRASENA
    WHERE USUARIO_ID_USUARIO_PK = P_USUARIO_ID_USUARIO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_USUARIOS_MODIFICAR_SP;
-- Modificar email
 PROCEDURE FIDE_USUARIOS_ACTUALIZAR_EMAIL_SP (
    P_USUARIO_ID_USUARIO_PK IN NUMBER,
    P_EMAIL IN VARCHAR2
) IS
BEGIN
    UPDATE FIDE_USUARIOS_TB
    SET EMAIL = P_EMAIL
    WHERE USUARIO_ID_USUARIO_PK = P_USUARIO_ID_USUARIO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR al actualizar email: ' || SQLERRM);
END FIDE_USUARIOS_ACTUALIZAR_EMAIL_SP;

-- Modificar telefono
 PROCEDURE FIDE_USUARIOS_ACTUALIZAR_TELEFONO_SP (
    P_USUARIO_ID_USUARIO_PK IN NUMBER,
    P_TELEFONO IN VARCHAR2
) IS
BEGIN
    UPDATE FIDE_USUARIOS_TB
    SET TELEFONO = P_TELEFONO
    WHERE USUARIO_ID_USUARIO_PK = P_USUARIO_ID_USUARIO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR al actualizar teléfono: ' || SQLERRM);
END FIDE_USUARIOS_ACTUALIZAR_TELEFONO_SP;

-- Modificar contraseña
 PROCEDURE FIDE_USUARIOS_ACTUALIZAR_CONTRASENA_SP (
    P_USUARIO_ID_USUARIO_PK IN NUMBER,
    P_CONTRASENA IN VARCHAR2
) IS
BEGIN
    UPDATE FIDE_USUARIOS_TB
    SET CONTRASENA = P_CONTRASENA
    WHERE USUARIO_ID_USUARIO_PK = P_USUARIO_ID_USUARIO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR al actualizar contraseña: ' || SQLERRM);
END FIDE_USUARIOS_ACTUALIZAR_CONTRASENA_SP;

-- Eliminación lógica
 PROCEDURE FIDE_USUARIOS_ELIMINAR_SP (
    P_USUARIO_ID_USUARIO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_USUARIOS_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE USUARIO_ID_USUARIO_PK = P_USUARIO_ID_USUARIO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_USUARIOS_ELIMINAR_SP;

-- FIDE_DIRECCIONES_TB
-- Inserción
 PROCEDURE FIDE_DIRECCIONES_INSERTAR_SP (
    P_DIRECCION_ID_DIRECCION_PK IN NUMBER,
    P_USUARIOS_ID_USUARIO_FK IN NUMBER,
    P_PAISES_ID_PAIS_FK IN NUMBER,
    P_PROVINCIAS_ID_PROVINCIA_FK IN NUMBER,
    P_CANTONES_ID_CANTON_FK IN NUMBER,
    P_DISTRITOS_ID_DISTRITO_FK IN NUMBER,
    P_OTRAS_SENAS IN VARCHAR2,
    P_ESTADOS_ID_ESTADO IN NUMBER
) IS
BEGIN
    INSERT INTO FIDE_DIRECCIONES_TB (DIRECCION_ID_DIRECCION_PK,USUARIOS_ID_USUARIO_FK,PAISES_ID_PAIS_FK,PROVINCIAS_ID_PROVINCIA_FK,CANTONES_ID_CANTON_FK,DISTRITOS_ID_DISTRITO_FK,OTRAS_SENAS,ESTADOS_ID_ESTADO_FK) 
    VALUES (P_DIRECCION_ID_DIRECCION_PK,P_USUARIOS_ID_USUARIO_FK,P_PAISES_ID_PAIS_FK,P_PROVINCIAS_ID_PROVINCIA_FK,P_CANTONES_ID_CANTON_FK,P_DISTRITOS_ID_DISTRITO_FK,P_OTRAS_SENAS,P_ESTADOS_ID_ESTADO);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_DIRECCIONES_INSERTAR_SP;


-- Modificación
 PROCEDURE FIDE_DIRECCIONES_MODIFICAR_SP (
    P_DIRECCION_ID_DIRECCION_PK IN NUMBER,
    P_PAISES_ID_PAIS_FK IN NUMBER,
    P_PROVINCIAS_ID_PROVINCIA_FK IN NUMBER,
    P_CANTONES_ID_CANTON_FK IN NUMBER,
    P_DISTRITOS_ID_DISTRITO_FK IN NUMBER,
    P_OTRAS_SENAS IN VARCHAR2,
    P_ESTADOS_ID_ESTADO IN NUMBER
) IS
BEGIN
    UPDATE FIDE_DIRECCIONES_TB
    SET PAISES_ID_PAIS_FK = P_PAISES_ID_PAIS_FK,
            PROVINCIAS_ID_PROVINCIA_FK = P_PROVINCIAS_ID_PROVINCIA_FK,
            CANTONES_ID_CANTON_FK = P_CANTONES_ID_CANTON_FK,
            DISTRITOS_ID_DISTRITO_FK = P_DISTRITOS_ID_DISTRITO_FK,
            OTRAS_SENAS = P_OTRAS_SENAS,
            ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO
    WHERE DIRECCION_ID_DIRECCION_PK = P_DIRECCION_ID_DIRECCION_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_DIRECCIONES_MODIFICAR_SP;

-- Eliminación lógica
 PROCEDURE FIDE_DIRECCIONES_ELIMINAR_SP (
    P_DIRECCION_ID_DIRECCION_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO IN NUMBER
) IS
BEGIN
    UPDATE FIDE_DIRECCIONES_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO
    WHERE DIRECCION_ID_DIRECCION_PK = P_DIRECCION_ID_DIRECCION_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_DIRECCIONES_ELIMINAR_SP;


-- FIDE_CONTACTO_TB
-- Inserción
 PROCEDURE FIDE_CONTACTO_INSERTAR_SP (
    P_CONTACTO_ID_CONTACTO_PK IN NUMBER,
    P_USUARIOS_ID_USUARIO_FK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_ASUNTO IN VARCHAR2,
    P_MENSAJE IN VARCHAR2,
    P_FECHA_ENVIO IN DATE
) IS
BEGIN
    INSERT INTO FIDE_CONTACTO_TB (CONTACTO_ID_CONTACTO_PK,USUARIOS_ID_USUARIO_FK,ESTADOS_ID_ESTADO_FK,ASUNTO,MENSAJE,FECHA_ENVIO) 
    VALUES (P_CONTACTO_ID_CONTACTO_PK,P_USUARIOS_ID_USUARIO_FK,P_ESTADOS_ID_ESTADO_FK,P_ASUNTO,P_MENSAJE,P_FECHA_ENVIO);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_CONTACTO_INSERTAR_SP;

-- Modificación
 PROCEDURE FIDE_CONTACTO_MODIFICAR_SP (
    P_CONTACTO_ID_CONTACTO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_ASUNTO IN VARCHAR2,
    P_MENSAJE IN VARCHAR2,
    P_FECHA_ENVIO IN DATE
) IS
BEGIN
    UPDATE FIDE_CONTACTO_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK,
            ASUNTO = P_ASUNTO,
            MENSAJE = P_MENSAJE,
            FECHA_ENVIO = P_FECHA_ENVIO
    WHERE CONTACTO_ID_CONTACTO_PK = P_CONTACTO_ID_CONTACTO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_CONTACTO_MODIFICAR_SP;

-- Eliminación lógica
 PROCEDURE FIDE_CONTACTO_ELIMINAR_SP (
    P_CONTACTO_ID_CONTACTO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_CONTACTO_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE CONTACTO_ID_CONTACTO_PK = P_CONTACTO_ID_CONTACTO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END FIDE_CONTACTO_ELIMINAR_SP;

-- FIDE_PRODUCTOS_TB
-- Inserción
 PROCEDURE FIDE_PRODUCTOS_INSERTAR_SP (
    P_PRODUCTO_ID_PRODUCTO_PK IN NUMBER,
    P_CATEGORIA_ID_CATEGORIA_FK IN NUMBER,
    P_PRESENTACIONES_ID_PRESENTACION_FK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_PRECIO_UNITARIO IN NUMBER
) IS
BEGIN
    INSERT INTO FIDE_PRODUCTOS_TB (
        PRODUCTO_ID_PRODUCTO_PK, CATEGORIA_ID_CATEGORIA_FK, PRESENTACIONES_ID_PRESENTACION_FK,
        ESTADOS_ID_ESTADO_FK, NOMBRE, DESCRIPCION, PRECIO_UNITARIO
    ) VALUES (
        P_PRODUCTO_ID_PRODUCTO_PK, P_CATEGORIA_ID_CATEGORIA_FK, P_PRESENTACIONES_ID_PRESENTACION_FK,
        P_ESTADOS_ID_ESTADO_FK, P_NOMBRE, P_DESCRIPCION, P_PRECIO_UNITARIO
    );
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Modificación
 PROCEDURE FIDE_PRODUCTOS_MODIFICAR_SP (
    P_PRODUCTO_ID_PRODUCTO_PK IN NUMBER,
    P_CATEGORIA_ID_CATEGORIA_FK IN NUMBER,
    P_PRESENTACIONES_ID_PRESENTACION_FK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_PRECIO_UNITARIO IN NUMBER
) IS
BEGIN
    UPDATE FIDE_PRODUCTOS_TB
    SET CATEGORIA_ID_CATEGORIA_FK = P_CATEGORIA_ID_CATEGORIA_FK,
        PRESENTACIONES_ID_PRESENTACION_FK = P_PRESENTACIONES_ID_PRESENTACION_FK,
        ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK,
        NOMBRE = P_NOMBRE,
        DESCRIPCION = P_DESCRIPCION,
        PRECIO_UNITARIO = P_PRECIO_UNITARIO
    WHERE PRODUCTO_ID_PRODUCTO_PK = P_PRODUCTO_ID_PRODUCTO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Eliminación lógica
 PROCEDURE FIDE_PRODUCTOS_ELIMINAR_SP (
    P_PRODUCTO_ID_PRODUCTO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_PRODUCTOS_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE PRODUCTO_ID_PRODUCTO_PK = P_PRODUCTO_ID_PRODUCTO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

-- FIDE_CARRITO_TB
-- Inserción
 PROCEDURE FIDE_CARRITO_INSERTAR_SP (
    P_CARRITO_ID_CARRITO_PK IN NUMBER,
    P_USUARIOS_ID_USUARIO_FK IN NUMBER,
    P_PRODUCTOS_ID_PRODUCTO_FK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_CANTIDAD IN NUMBER,
    P_FECHA_AGREGADO IN DATE
) IS
BEGIN
    INSERT INTO FIDE_CARRITO_TB (
        CARRITO_ID_CARRITO_PK, USUARIOS_ID_USUARIO_FK, PRODUCTOS_ID_PRODUCTO_FK,
        ESTADOS_ID_ESTADO_FK, CANTIDAD, FECHA_AGREGADO
    ) VALUES (
        P_CARRITO_ID_CARRITO_PK, P_USUARIOS_ID_USUARIO_FK, P_PRODUCTOS_ID_PRODUCTO_FK,
        P_ESTADOS_ID_ESTADO_FK, P_CANTIDAD, P_FECHA_AGREGADO
    );
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Modificación
 PROCEDURE FIDE_CARRITO_MODIFICAR_SP (
    P_CARRITO_ID_CARRITO_PK IN NUMBER,
    P_CANTIDAD IN NUMBER
) IS
BEGIN
    UPDATE FIDE_CARRITO_TB
    SET CANTIDAD = P_CANTIDAD
    WHERE CARRITO_ID_CARRITO_PK = P_CARRITO_ID_CARRITO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Eliminación lógica
 PROCEDURE FIDE_CARRITO_ELIMINAR_SP (
    P_CARRITO_ID_CARRITO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_CARRITO_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE CARRITO_ID_CARRITO_PK = P_CARRITO_ID_CARRITO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

-- FIDE_PEDIDOS_TB
-- Inserción
 PROCEDURE FIDE_PEDIDOS_INSERTAR_SP (
    P_PEDIDOS_ID_PEDIDO_PK IN NUMBER,
    P_USUARIOS_ID_USUARIO_FK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_FECHA_PEDIDO IN DATE,
    P_TOTAL IN NUMBER
) IS
BEGIN
    INSERT INTO FIDE_PEDIDOS_TB (
        PEDIDOS_ID_PEDIDO_PK, USUARIOS_ID_USUARIO_FK, ESTADOS_ID_ESTADO_FK,
        FECHA_PEDIDO, TOTAL
    ) VALUES (
        P_PEDIDOS_ID_PEDIDO_PK, P_USUARIOS_ID_USUARIO_FK, P_ESTADOS_ID_ESTADO_FK,
        P_FECHA_PEDIDO, P_TOTAL
    );
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

-- Modificación
 PROCEDURE FIDE_PEDIDOS_MODIFICAR_SP (
    P_PEDIDOS_ID_PEDIDO_PK IN NUMBER,
    P_TOTAL IN NUMBER
) IS
BEGIN
    UPDATE FIDE_PEDIDOS_TB
    SET TOTAL = P_TOTAL
    WHERE PEDIDOS_ID_PEDIDO_PK = P_PEDIDOS_ID_PEDIDO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Eliminación lógica
 PROCEDURE FIDE_PEDIDOS_ELIMINAR_SP (
    P_PEDIDOS_ID_PEDIDO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_PEDIDOS_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE PEDIDOS_ID_PEDIDO_PK = P_PEDIDOS_ID_PEDIDO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

-- FIDE_DETALLE_PEDIDO_TB
-- Inserción
 PROCEDURE FIDE_DETALLE_PEDIDO_INSERTAR_SP (
    P_DETALLE_PEDIDO_ID_DETALLE_PK IN NUMBER,
    P_PEDIDOS_ID_PEDIDO_FK IN NUMBER,
    P_PRODUCTOS_ID_PRODUCTO_FK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_CANTIDAD IN NUMBER,
    P_PRECIO_UNITARIO IN NUMBER
) IS
BEGIN
    INSERT INTO FIDE_DETALLE_PEDIDO_TB (
        DETALLE_PEDIDO_ID_DETALLE_PK, PEDIDOS_ID_PEDIDO_FK,
        PRODUCTOS_ID_PRODUCTO_FK, ESTADOS_ID_ESTADO_FK,
        CANTIDAD, PRECIO_UNITARIO
    ) VALUES (
        P_DETALLE_PEDIDO_ID_DETALLE_PK, P_PEDIDOS_ID_PEDIDO_FK,
        P_PRODUCTOS_ID_PRODUCTO_FK, P_ESTADOS_ID_ESTADO_FK,
        P_CANTIDAD, P_PRECIO_UNITARIO
    );
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Modificación
 PROCEDURE FIDE_DETALLE_PEDIDO_MODIFICAR_SP (
    P_DETALLE_PEDIDO_ID_DETALLE_PK IN NUMBER,
    P_CANTIDAD IN NUMBER,
    P_PRECIO_UNITARIO IN NUMBER
) IS
BEGIN
    UPDATE FIDE_DETALLE_PEDIDO_TB
    SET CANTIDAD = P_CANTIDAD,
        PRECIO_UNITARIO = P_PRECIO_UNITARIO
    WHERE DETALLE_PEDIDO_ID_DETALLE_PK = P_DETALLE_PEDIDO_ID_DETALLE_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Eliminación lógica
 PROCEDURE FIDE_DETALLE_PEDIDO_ELIMINAR_SP (
    P_DETALLE_PEDIDO_ID_DETALLE_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_DETALLE_PEDIDO_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE DETALLE_PEDIDO_ID_DETALLE_PK = P_DETALLE_PEDIDO_ID_DETALLE_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

-- FIDE_FACTURACION_TB
-- Inserción
 PROCEDURE FIDE_FACTURACION_INSERTAR_SP (
    P_FACTURACION_ID_FACTURA_PK IN NUMBER,
    P_PEDIDOS_ID_PEDIDO_FK IN NUMBER,
    P_METODOS_PAGO_ID_PAGO_FK IN NUMBER,
    P_FECHA_EMISION IN DATE,
    P_DESCUENTOS IN NUMBER,
    P_SUBTOTAL IN NUMBER,
    P_IVA IN NUMBER,
    P_TOTAL_FACTURADO IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    INSERT INTO FIDE_FACTURACION_TB (
        FACTURACION_ID_FACTURA_PK, PEDIDOS_ID_PEDIDO_FK, METODOS_PAGO_ID_PAGO_FK,
        FECHA_EMISION, DESCUENTOS, SUBTOTAL, IVA, TOTAL_FACTURADO,
        ESTADOS_ID_ESTADO_FK
    ) VALUES (
        P_FACTURACION_ID_FACTURA_PK, P_PEDIDOS_ID_PEDIDO_FK, P_METODOS_PAGO_ID_PAGO_FK,
        P_FECHA_EMISION, P_DESCUENTOS, P_SUBTOTAL, P_IVA, P_TOTAL_FACTURADO,
        P_ESTADOS_ID_ESTADO_FK
    );
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Modificación
 PROCEDURE FIDE_FACTURACION_MODIFICAR_SP (
    P_FACTURACION_ID_FACTURA_PK IN NUMBER,
    P_DESCUENTOS IN NUMBER,
    P_SUBTOTAL IN NUMBER,
    P_IVA IN NUMBER,
    P_TOTAL_FACTURADO IN NUMBER
) IS
BEGIN
    UPDATE FIDE_FACTURACION_TB
    SET DESCUENTOS = P_DESCUENTOS,
        SUBTOTAL = P_SUBTOTAL,
        IVA = P_IVA,
        TOTAL_FACTURADO = P_TOTAL_FACTURADO
    WHERE FACTURACION_ID_FACTURA_PK = P_FACTURACION_ID_FACTURA_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Eliminación lógica
 PROCEDURE FIDE_FACTURACION_ELIMINAR_SP (
    P_FACTURACION_ID_FACTURA_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_FACTURACION_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE FACTURACION_ID_FACTURA_PK = P_FACTURACION_ID_FACTURA_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

-- FIDE_INVENTARIO_TB
-- Inserción
 PROCEDURE FIDE_INVENTARIO_INSERTAR_SP (
    P_INVENTARIO_ID_MOVIMIENTO_PK IN NUMBER,
    P_PRODUCTOS_ID_PRODUCTO_FK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_ALMACENADO_ID_ALMACENADO_FK IN NUMBER,
    P_CANTIDAD_STOCK IN NUMBER,
    P_FECHA_INGRESO IN DATE,
    P_OBSERVACIONES IN VARCHAR2
) IS
BEGIN
    INSERT INTO FIDE_INVENTARIO_TB (
        INVENTARIO_ID_MOVIMIENTO_PK, PRODUCTOS_ID_PRODUCTO_FK, ESTADOS_ID_ESTADO_FK,
        ALMACENADO_ID_ALMACENADO_FK, CANTIDAD_STOCK, FECHA_INGRESO, OBSERVACIONES
    ) VALUES (
        P_INVENTARIO_ID_MOVIMIENTO_PK, P_PRODUCTOS_ID_PRODUCTO_FK, P_ESTADOS_ID_ESTADO_FK,
        P_ALMACENADO_ID_ALMACENADO_FK, P_CANTIDAD_STOCK, P_FECHA_INGRESO, P_OBSERVACIONES
    );
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Modificación
 PROCEDURE FIDE_INVENTARIO_MODIFICAR_SP (
    P_INVENTARIO_ID_MOVIMIENTO_PK IN NUMBER,
    P_CANTIDAD_STOCK IN NUMBER,
    P_OBSERVACIONES IN VARCHAR2
) IS
BEGIN
    UPDATE FIDE_INVENTARIO_TB
    SET CANTIDAD_STOCK = P_CANTIDAD_STOCK,
        OBSERVACIONES = P_OBSERVACIONES
    WHERE INVENTARIO_ID_MOVIMIENTO_PK = P_INVENTARIO_ID_MOVIMIENTO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Eliminación lógica
 PROCEDURE FIDE_INVENTARIO_ELIMINAR_SP (
    P_INVENTARIO_ID_MOVIMIENTO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_INVENTARIO_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE INVENTARIO_ID_MOVIMIENTO_PK = P_INVENTARIO_ID_MOVIMIENTO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

-- FIDE_ALMACENADO_TB
-- Inserción
 PROCEDURE FIDE_ALMACENADO_INSERTAR_SP (
    P_ALMACENADO_ID_ALMACENADO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_DESCRIPCION_ALMACENADO IN VARCHAR2
) IS
BEGIN
    INSERT INTO FIDE_ALMACENADO_TB (
        ALMACENADO_ID_ALMACENADO_PK, ESTADOS_ID_ESTADO_FK, DESCRIPCION_ALMACENADO
    ) VALUES (
        P_ALMACENADO_ID_ALMACENADO_PK, P_ESTADOS_ID_ESTADO_FK, P_DESCRIPCION_ALMACENADO
    );
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Modificación
 PROCEDURE FIDE_ALMACENADO_MODIFICAR_SP (
    P_ALMACENADO_ID_ALMACENADO_PK IN NUMBER,
    P_DESCRIPCION_ALMACENADO IN VARCHAR2
) IS
BEGIN
    UPDATE FIDE_ALMACENADO_TB
    SET DESCRIPCION_ALMACENADO = P_DESCRIPCION_ALMACENADO
    WHERE ALMACENADO_ID_ALMACENADO_PK = P_ALMACENADO_ID_ALMACENADO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Eliminación lógica
 PROCEDURE FIDE_ALMACENADO_ELIMINAR_SP (
    P_ALMACENADO_ID_ALMACENADO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_ALMACENADO_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE ALMACENADO_ID_ALMACENADO_PK = P_ALMACENADO_ID_ALMACENADO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;
-- FIDE_PRESENTACIONES_TB
-- Inserción
 PROCEDURE FIDE_PRESENTACIONES_INSERTAR_SP (
    P_PRESENTACIONES_ID_PRESENTACION_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_TIPO_PRESENTACION IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2
) IS
BEGIN
    INSERT INTO FIDE_PRESENTACIONES_TB (
        PRESENTACIONES_ID_PRESENTACION_PK, ESTADOS_ID_ESTADO_FK,
        TIPO_PRESENTACION, DESCRIPCION
    ) VALUES (
        P_PRESENTACIONES_ID_PRESENTACION_PK, P_ESTADOS_ID_ESTADO_FK,
        P_TIPO_PRESENTACION, P_DESCRIPCION
    );
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Modificación
 PROCEDURE FIDE_PRESENTACIONES_MODIFICAR_SP (
    P_PRESENTACIONES_ID_PRESENTACION_PK IN NUMBER,
    P_TIPO_PRESENTACION IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2
) IS
BEGIN
    UPDATE FIDE_PRESENTACIONES_TB
    SET TIPO_PRESENTACION = P_TIPO_PRESENTACION,
        DESCRIPCION = P_DESCRIPCION
    WHERE PRESENTACIONES_ID_PRESENTACION_PK = P_PRESENTACIONES_ID_PRESENTACION_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Eliminación lógica
 PROCEDURE FIDE_PRESENTACIONES_ELIMINAR_SP (
    P_PRESENTACIONES_ID_PRESENTACION_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_PRESENTACIONES_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE PRESENTACIONES_ID_PRESENTACION_PK = P_PRESENTACIONES_ID_PRESENTACION_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

-- FIDE_CATEGORIA_TB
-- Inserción
 PROCEDURE FIDE_CATEGORIA_INSERTAR_SP (
    P_CATEGORIA_ID_CATEGORIA_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_NOMBRE_CATEGORIA IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2
) IS
BEGIN
    INSERT INTO FIDE_CATEGORIA_TB (
        CATEGORIA_ID_CATEGORIA_PK, ESTADOS_ID_ESTADO_FK,
        NOMBRE_CATEGORIA, DESCRIPCION
    ) VALUES (
        P_CATEGORIA_ID_CATEGORIA_PK, P_ESTADOS_ID_ESTADO_FK,
        P_NOMBRE_CATEGORIA, P_DESCRIPCION
    );
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Modificación
 PROCEDURE FIDE_CATEGORIA_MODIFICAR_SP (
    P_CATEGORIA_ID_CATEGORIA_PK IN NUMBER,
    P_NOMBRE_CATEGORIA IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2
) IS
BEGIN
    UPDATE FIDE_CATEGORIA_TB
    SET NOMBRE_CATEGORIA = P_NOMBRE_CATEGORIA,
        DESCRIPCION = P_DESCRIPCION
    WHERE CATEGORIA_ID_CATEGORIA_PK = P_CATEGORIA_ID_CATEGORIA_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;


-- Eliminación lógica
 PROCEDURE FIDE_CATEGORIA_ELIMINAR_SP (
    P_CATEGORIA_ID_CATEGORIA_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_CATEGORIA_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE CATEGORIA_ID_CATEGORIA_PK = P_CATEGORIA_ID_CATEGORIA_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

-- FIDE_METODOS_PAGO_TB
-- Inserción
 PROCEDURE FIDE_METODOS_PAGO_INSERTAR_SP (
    P_METODOS_PAGO_ID_PAGO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER,
    P_NOMBRE_METODO IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2
) IS
BEGIN
    INSERT INTO FIDE_METODOS_PAGO_TB (
        METODOS_PAGO_ID_PAGO_PK, ESTADOS_ID_ESTADO_FK,
        NOMBRE_METODO, DESCRIPCION
    ) VALUES (
        P_METODOS_PAGO_ID_PAGO_PK, P_ESTADOS_ID_ESTADO_FK,
        P_NOMBRE_METODO, P_DESCRIPCION
    );
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

-- Modificación
 PROCEDURE FIDE_METODOS_PAGO_MODIFICAR_SP (
    P_METODOS_PAGO_ID_PAGO_PK IN NUMBER,
    P_NOMBRE_METODO IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2
) IS
BEGIN
    UPDATE FIDE_METODOS_PAGO_TB
    SET NOMBRE_METODO = P_NOMBRE_METODO,
        DESCRIPCION = P_DESCRIPCION
    WHERE METODOS_PAGO_ID_PAGO_PK = P_METODOS_PAGO_ID_PAGO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

-- Eliminación lógica
 PROCEDURE FIDE_METODOS_PAGO_ELIMINAR_SP (
    P_METODOS_PAGO_ID_PAGO_PK IN NUMBER,
    P_ESTADOS_ID_ESTADO_FK IN NUMBER
) IS
BEGIN
    UPDATE FIDE_METODOS_PAGO_TB
    SET ESTADOS_ID_ESTADO_FK = P_ESTADOS_ID_ESTADO_FK
    WHERE METODOS_PAGO_ID_PAGO_PK = P_METODOS_PAGO_ID_PAGO_PK;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

END FIDE_PROYECTO_FINAL_PKG;